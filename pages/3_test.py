import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

def calcular_metricas_livros(df):
    """
    Calcula m√©tricas principais do DataFrame de livros.
    
    Args:
        df (pandas.DataFrame): DataFrame com informa√ß√µes dos livros
    
    Returns:
        dict: Dicion√°rio com m√©tricas calculadas
    """
    metricas = {
        'Total de Livros': len(df),
        'Total de P√°ginas': df['N√∫mero de P√°ginas'].sum() if 'N√∫mero de P√°ginas' in df.columns else 0,
        'M√©dia de P√°ginas por Livro': round(df['N√∫mero de P√°ginas'].mean(), 2) if 'N√∫mero de P√°ginas' in df.columns else 0,
        'N√∫mero de Autores √önicos': df['Autor'].nunique() if 'Autor' in df.columns else 0
    }
    
    return metricas

def criar_cards_metricas(metricas):
    """
    Cria cards de m√©tricas no estilo Power BI usando Streamlit.
    
    Args:
        metricas (dict): Dicion√°rio com m√©tricas calculadas
    """
    # Configura√ß√£o de layout de colunas
    cols = st.columns(4)
    
    # Defini√ß√£o de √≠cones e cores para cada m√©trica
    icones_metricas = {
        'Total de Livros': 'üìö',
        'Total de P√°ginas': 'üåê',
        'M√©dia de P√°ginas por Livro': 'üìñ',
        'N√∫mero de Autores √önicos': 'üë•'
    }
    
    cores_metricas = {
        'Total de Livros': 'background-color: #3498db; color: white;',
        'Total de P√°ginas': 'background-color: #2ecc71; color: white;',
        'M√©dia de P√°ginas por Livro': 'background-color: #e74c3c; color: white;',
        'N√∫mero de Autores √önicos': 'background-color: #f39c12; color: white;'
    }
    
    # Cria√ß√£o dos cards
    for i, (nome, valor) in enumerate(metricas.items()):
        with cols[i]:
            st.markdown(f"""
            <div style="
                border-radius: 10px;
                padding: 20px;
                text-align: center;
                {cores_metricas[nome]}
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            ">
                <h3 style="margin-bottom: 10px;">{icones_metricas[nome]} {nome}</h3>
                <p style="font-size: 24px; font-weight: bold;">{valor:,}</p>
            </div>
            """, unsafe_allow_html=True)

def criar_grafico_distribuicao_paginas(df):
    """
    Cria um gr√°fico de distribui√ß√£o do n√∫mero de p√°ginas dos livros.
    
    Args:
        df (pandas.DataFrame): DataFrame com informa√ß√µes dos livros
    """
    if 'N√∫mero de P√°ginas' not in df.columns:
        st.warning("Coluna 'N√∫mero de P√°ginas' n√£o encontrada.")
        return
    
    st.subheader("Distribui√ß√£o do N√∫mero de P√°ginas")
    
    # Gr√°fico de histograma interativo
    fig = px.histogram(df, x='N√∫mero de P√°ginas', 
                       title='Distribui√ß√£o de P√°ginas por Livro',
                       labels={'N√∫mero de P√°ginas': 'N√∫mero de P√°ginas'},
                       color_discrete_sequence=['#3498db'])
    
    fig.update_layout(
        xaxis_title='N√∫mero de P√°ginas',
        yaxis_title='N√∫mero de Livros'
    )
    
    st.plotly_chart(fig)

def dashboard_livros(df):
    """
    Cria um dashboard completo de m√©tricas de livros.
    
    Args:
        df (pandas.DataFrame): DataFrame com informa√ß√µes dos livros
    """
    st.title("üìä Dashboard de Livros")
    
    # Calcular m√©tricas
    metricas = calcular_metricas_livros(df)
    
    # Criar cards de m√©tricas
    criar_cards_metricas(metricas)
    
    # Adicionar espa√ßo
    st.markdown("---")
    
    # Criar gr√°fico de distribui√ß√£o de p√°ginas
    criar_grafico_distribuicao_paginas(df)

# Exemplo de uso
def main():
    # Exemplo de DataFrame (substitua pelo seu DataFrame real)
    df_exemplo = pd.DataFrame({
        'T√≠tulo': ['Moby Dick', 'Dom Quixote', '1984', 'O Pequeno Pr√≠ncipe'],
        'Autor': ['Herman Melville', 'Miguel de Cervantes', 'George Orwell', 'Antoine de Saint-Exup√©ry'],
        'N√∫mero de P√°ginas': [720, 863, 336, 96]
    })
    
    # Criar dashboard
    dashboard_livros(df_exemplo)

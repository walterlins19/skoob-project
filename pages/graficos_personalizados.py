# pages/graficos_personalizados.py
import streamlit as st
import pandas as pd
import pygwalker as pyg
from pygwalker.api.streamlit import StreamlitRenderer

def load_data():
    """
    Carrega os dados do session_state.
    Retorna None se os dados n√£o estiverem dispon√≠veis.
    """
    if 'df_livros' in st.session_state:
        return st.session_state['df_livros']
    else:
        st.error("Por favor, carregue os dados na p√°gina principal primeiro.")
        return None

def preparar_dados_para_graficos(df):
    """
    Prepara os dados para uso no criador de gr√°ficos.
    
    Args:
        df (pandas.DataFrame): DataFrame original
        
    Returns:
        pandas.DataFrame: DataFrame preparado para visualiza√ß√£o
    """
    df_prep = df.copy()
    
    # Tratamento de datas
    df_prep['Conclus√£o'] = pd.to_datetime(df_prep['Conclus√£o'])
    df_prep['Ano'] = df_prep['Conclus√£o'].dt.year
    df_prep['M√™s'] = df_prep['Conclus√£o'].dt.month
    df_prep['M√™s_Nome'] = df_prep['Conclus√£o'].dt.strftime('%B')
    df_prep['Trimestre'] = df_prep['Conclus√£o'].dt.quarter
    
    # Converter Ano de Publica√ß√£o para num√©rico
    df_prep['Ano de Publica√ß√£o'] = pd.to_numeric(df_prep['Ano de Publica√ß√£o'], errors='coerce')
    
    # Calcular m√©tricas agregadas
    df_prep['P√°ginas_por_M√™s'] = df_prep.groupby(['Ano', 'M√™s'])['P√°ginas'].transform('sum')
    df_prep['Nota_M√©dia_por_G√™nero'] = df_prep.groupby('G√™nero')['Nota'].transform('mean')
    df_prep['Nota_M√©dia_por_Autor'] = df_prep.groupby('Autor')['Nota'].transform('mean')
    
    # M√©dias m√≥veis
    df_prep['M√©dia_M√≥vel_P√°ginas'] = df_prep.groupby('Ano')['P√°ginas'].transform(
        lambda x: x.rolling(window=3, min_periods=1).mean()
    )
    df_prep['M√©dia_M√≥vel_Notas'] = df_prep.groupby('Ano')['Nota'].transform(
        lambda x: x.rolling(window=3, min_periods=1).mean()
    )
    
    # Criar categorias √∫teis
    df_prep['Tamanho'] = pd.cut(
        df_prep['P√°ginas'],
        bins=[0, 100, 300, 500, float('inf')],
        labels=['Curto', 'M√©dio', 'Longo', 'Muito Longo']
    )
    
    df_prep['Faixa_Nota'] = pd.cut(
        df_prep['Nota'],
        bins=[0, 2, 3, 4, 5],
        labels=['Ruim', 'Regular', 'Bom', 'Excelente']
    )
    
    # Remover a coluna ID que n√£o √© necess√°ria para visualiza√ß√£o
    if 'M√™s Conclus√£o' in df_prep.columns:
        df_prep = df_prep.drop('M√™s Conclus√£o', axis=1)
    
    return df_prep

def main():
    st.set_page_config(
        page_title="Criador de Gr√°ficos Personalizados",
        page_icon="üìä",
        layout="wide"
    )

    st.title("üìä Criador de Gr√°ficos Personalizados")
    
    # Carregar dados
    df = load_data()
    if df is None:
        return
        
    # Informa√ß√µes de uso
    with st.expander("‚ÑπÔ∏è Como usar o criador de gr√°ficos"):
        st.markdown("""
        ### Instru√ß√µes de Uso:
        
        1. **An√°lises Temporais:**
           - Use 'Conclus√£o' ou 'Ano de Publica√ß√£o' para an√°lises ao longo do tempo
           - Combine com 'Nota' ou 'P√°ginas' para ver tend√™ncias
        
        2. **An√°lises Demogr√°ficas:**
           - Explore distribui√ß√µes por 'Pa√≠s', 'Regi√£o', 'Sexo Autor' e 'Etnia'
           - Compare notas m√©dias por diferentes grupos
        
        3. **An√°lises Liter√°rias:**
           - Compare 'G√™nero' com outras m√©tricas
           - Analise diferen√ßas entre 'Fic√ß√£o' e n√£o fic√ß√£o
           - Explore tend√™ncias por 'S√©c' de publica√ß√£o
        """)
    
    # Preparar dados
    df_prep = preparar_dados_para_graficos(df)

    
    try:
        # Configurar tema do PyGWalker
        config = {
            "theme": "streamlit",
            "dark_mode": True,
            "layout": {
                "width": "100%",
                "height": "800px"
            }
        }
        
        # Criar interface do PyGWalker
        pyg_app = StreamlitRenderer(df_prep)
        
        pyg_app.explorer()

                # Adicionar sugest√µes de an√°lises
        with st.expander("üí° Sugest√µes de An√°lises"):
            st.markdown("""
            ### An√°lises Recomendadas:
            
            1. **Padr√µes de Leitura**
               - Livros lidos por m√™s/ano
               - P√°ginas lidas ao longo do tempo
               - Notas m√©dias por per√≠odo
            
            2. **Diversidade Liter√°ria**
               - Distribui√ß√£o por g√™nero e fic√ß√£o/n√£o-fic√ß√£o
               - Representatividade por sexo do autor e etnia
               - Distribui√ß√£o geogr√°fica (pa√≠s/regi√£o)
            
            3. **Tend√™ncias Hist√≥ricas**
               - Compara√ß√£o entre ano de publica√ß√£o e data de leitura
               - An√°lise por s√©culo de publica√ß√£o
               - Evolu√ß√£o das notas por per√≠odo hist√≥rico
            
            4. **An√°lises Editoriais**
               - Distribui√ß√£o por editora
               - Rela√ß√£o entre editora e n√∫mero de p√°ginas
               - Notas m√©dias por editora
            """)
        
        # Mostrar campos dispon√≠veis
        with st.expander("üìã Campos Dispon√≠veis para An√°lise"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("### Dados Temporais")
                st.markdown("""
                - Conclus√£o
                - Ano de Publica√ß√£o
                - S√©c
                - M√™s
                - Ano
                - Trimestre
                """)
                
                st.markdown("### M√©tricas")
                st.markdown("""
                - P√°ginas
                - Nota
                - M√©dia M√≥vel de P√°ginas
                - M√©dia M√≥vel de Notas
                """)
            
            with col2:
                st.markdown("### Categorias Liter√°rias")
                st.markdown("""
                - G√™nero
                - Fic√ß√£o
                - Editora
                - T√≠tulo
                """)
                
                st.markdown("### Dados Geogr√°ficos")
                st.markdown("""
                - Pa√≠s
                - Regi√£o
                """)
            
            with col3:
                st.markdown("### Dados Demogr√°ficos")
                st.markdown("""
                - Autor
                - Sexo Autor
                - Etnia
                """)
                
                st.markdown("### Campos Calculados")
                st.markdown("""
                - Livros por Per√≠odo
                - P√°ginas por Per√≠odo
                - Notas M√©dias
                """)
        
    except Exception as e:
        st.error(f"""
        Erro ao carregar o PyGWalker: {str(e)}
        
        Certifique-se de que o PyGWalker est√° instalado:
        ```bash
        pip install pygwalker
        ```
        """)
        
        # Mostrar DataFrame como fallback
        st.write("Mostrando dados em formato tabular como alternativa:")
        st.dataframe(df_prep)
        
    except Exception as e:
        st.error(f"""
        Erro ao carregar o PyGWalker: {str(e)}
        
        Certifique-se de que o PyGWalker est√° instalado:
        ```bash
        pip install pygwalker
        ```
        """)
        
        # Mostrar DataFrame como fallback
        st.write("Mostrando dados em formato tabular como alternativa:")
        st.dataframe(df_prep)

if __name__ == "__main__":
    main()